from snakemake.utils import R
from os.path import join
import csv

# simulate a bash login shell, see https://bitbucket.org/johanneskoester/snakemake/wiki/FAQ
shell.executable("/bin/bash")
#
# # "unofficial bash strict mode" http://www.redsymbol.net/articles/unofficial-bash-strict-mode/
shell.prefix("source ~/.bashrc; set -euo pipefail;")
#
#

# Globals ---------------------------------------------------------------------

vsAll = {"T": "vsAll","F": "paired_vs_" + config["CONTROL"]}

# get the seqbatch : libid pairs for given comparebatch id
LIBIDS = []
SEQBATCHS = []
SEQDIR = []
SEQFILES = []
TREATMENTS = []
CONDITIONS = []
sampleinfo = open(config["SAMPLEINFO"],"r",newline='')
for line in sampleinfo:
	allelems = line.strip().split("\t");
	if allelems[6] == config["COMPAREBATCH"]:
		LIBIDS.append(allelems[1])
		SEQBATCHS.append(allelems[4])
		CONDITIONS.append(allelems[2])
		#SEQDIR.append(allelems[8])
		#SEQFILES.append(allelems[8] + allelems[7])
		if allelems[2] != config["CONTROL"]:
			TREATMENTS.append(allelems[2])
TREATMENTS = list(set(TREATMENTS))

##################################################################################
#     Directories
##################################################################################
mybatch = config["COMPAREBATCH"]
RESULTROOT = config["RESULTROOT"]
RESULTDIR = config["RESULTROOT"] + "/" + "PARCEL/" + config["REFTYPE"] + "/" + mybatch + "/"
TRIMSEQDIR = config["RESULTROOT"] + "/" + "trimmedFastq/"
MAPRESULTDIR = config["RESULTROOT"] + "/" + "mappedResult/" + config["REFTYPE"] + "/"# the reftype could be genome, transcriptome or longesttranscriptome and so on.
COVERAGEDIR = config["RESULTROOT"] + "/" + "coverageInfo/" + config["REFTYPE"] + "/"
BEDGRAPHDIR = config["RESULTROOT"] + "/" + "bedgraphs/" + config["REFTYPE"] + "/" + mybatch + "/"
QUALITYDIR = config["RESULTROOT"] + "/" + "qualityCheck/" + mybatch + "/"

rule final:
	input: 
		QUALITYDIR + "processingSummary.xls",
		expand(RESULTDIR + vsAll[config['VSALL']] + "/" + "combined_{treatment}_output2_wfilters.txt",treatment = TREATMENTS),
		expand(RESULTDIR + vsAll[config['VSALL']] + "/" + "combined_{treatment}_covinfo.xls",treatment = TREATMENTS),
		expand(TRIMSEQDIR + "{seqbatch}/" + 'read.trim.{id}.log.sum', zip, id=LIBIDS, seqbatch=SEQBATCHS),
		expand(BEDGRAPHDIR + "{condition}" + "__{id}" + "__{seqbatch}__nor.bedgraph.gz", zip, condition = CONDITIONS, id=LIBIDS, seqbatch=SEQBATCHS)

rule trimAdaptor:
	input: 
		config["INPUTDIR"] + "{seqbatch}/" + "{id}.fastq.gz"
	output: 
		trimseq = TRIMSEQDIR + "{seqbatch}/" + "{id}.trim.fastq.gz",
		trimlog = TRIMSEQDIR + "{seqbatch}/" + "read.trim.{id}.log",
		trimsum = TRIMSEQDIR + "{seqbatch}/" + "read.trim.{id}.log.sum"
	params:
		adp1=config["ADAPTER"]["A"], adp2=config["ADAPTER"]["B"]

	log: TRIMSEQDIR + "{seqbatch}/" + "read.trim.{id}.err"
	threads: 16
	shell:
		"""
			{config[CUTADPT]} {input} {output.trimseq} {params.adp1} {params.adp2} {threads} {output.trimlog}
			ID={wildcards.id} {config[PARSE_CUT_ADT]} {output.trimlog} > {output.trimsum}
		"""


rule collectAdpTrimLog:
	input:
		expand(TRIMSEQDIR + "{seqbatch}/" + 'read.trim.{id}.log.sum', zip, id=LIBIDS, seqbatch=SEQBATCHS)
	output:
		TRIMSEQDIR + config["COMPAREBATCH"] + "/" + "trimSummary.txt"
	shell:
		"""
			cat {input} > {output}
		"""

rule mapToGenomeSoftClip:
	input: rules.trimAdaptor.output.trimseq
	output:
		bamresult = MAPRESULTDIR + "{seqbatch}/" + "{id}.trim.fastq.genome_mapping_best.sort.bam",
		maplog = MAPRESULTDIR + "{seqbatch}/" + "{id}.trim.fastq.genome_mapping.log",
		logsum = MAPRESULTDIR + "{seqbatch}/" + "{id}.trim.fastq.genome_mapping.summary"
	params:
		seqbatch = lambda wildcards: wildcards.seqbatch, mismatch = config["MISMATCH"], mapmodel = config["MAPMODEL"], genome = config["REFTRANSCRIPT"]
	threads: 30
	shell:
		"""
			MISMATCH={params.mismatch} {config[MAP_WAPPER]} {input} {threads} {params.genome} {output.maplog} {output.bamresult} {wildcards.id}
			ID={wildcards.id} {config[SUM_MAPLOG]} {output.maplog} > {output.logsum}
		"""

rule mapToGenome:
	input:
		rules.mapToGenomeSoftClip.output.bamresult
	output:
		bamresult = MAPRESULTDIR + "{seqbatch}/" + "{id}.trim.fastq.genome_mapping_best.no5clip.sort.bam",
		cliplog = MAPRESULTDIR + "{seqbatch}/" + "{id}.trim.fastq.genome_mapping.clip.log",
	threads: 8 
	shell:
			#ID={wildcards.id} {config[FILTER_CLIP]} {input} 2> {output.cliplog} | samtools view -@ {threads} -S -b - > {output.bamresult}
		"""
			ID={wildcards.id} ~/prog/mygithub/parcelTranscriptome/scripts/clipstats.sh {input} 2> {output.cliplog} | samtools view -@ {threads} -S -b - > {output.bamresult}
		"""

rule indexBam:
	input:
		rules.mapToGenome.output.bamresult	
	output:
		MAPRESULTDIR + "{seqbatch}/" + "{id}.trim.fastq.genome_mapping_best.no5clip.sort.bam.bai"
	shell:
		"""
			samtools index {input}
		"""

rule bedgraphTrack:
	input:
		bamresult = rules.mapToGenome.output.bamresult,
		bamIndex = rules.indexBam.output
	output:
		BEDGRAPHDIR + "{condition}__{id}__{seqbatch}__nor.bedgraph.gz"
	shell:
		"""
			COVMIN=0 FIVEPOS=yes {config[TOBEDGRAPH]} {input.bamresult} {wildcards.condition}__{wildcards.id}__nor {config[TRANSCRIPTOMESIZE]} yes yes no | pigz -c -p 8 > {output}
		"""


rule collectMapLog:
	input:
		expand(MAPRESULTDIR + "{seqbatch}/" + '{id}.trim.fastq.genome_mapping.summary', zip, id=LIBIDS, seqbatch=SEQBATCHS)
	output:
		MAPRESULTDIR + config["COMPAREBATCH"] + "/" + "mapSummary.txt"
	shell:
		"""
			cat {input} > {output}
		"""

rule collectClipFilterLog:
	input:
		expand(MAPRESULTDIR + "{seqbatch}/" + '{id}.trim.fastq.genome_mapping.clip.log', zip, id=LIBIDS, seqbatch=SEQBATCHS)
	output:
		MAPRESULTDIR + config["COMPAREBATCH"] + "/" + "clipSummary.txt"
	shell:
		"""
			cat {input} > {output}
		"""

rule qualityCheck:
	input:
		sampleinfo = config["SAMPLEINFO"],
		trimlog = rules.collectAdpTrimLog.output,
		maplog = rules.collectMapLog.output,
		cliplog = rules.collectClipFilterLog.output,
	output:
		proSum = QUALITYDIR  + "processingSummary.xls"
	params:
		outdir = QUALITYDIR , batch = config["COMPAREBATCH"]
	shell:
		"""
			{config[QUALCHECKSCRIPT]} {input.sampleinfo} {input.trimlog} {input.maplog} {input.cliplog} {params.batch} {params.outdir}
		"""

rule coverageCount:
	input:
		bamresult = rules.mapToGenome.output.bamresult,
		bamIndex = rules.indexBam.output
	output:
		COVERAGEDIR + "{seqbatch}/" + "{id}.cov.txt.gz"
	threads: 4
	params: numhit = config["NUMHIT"]
	shell:
		"""
			NUMHIT={params.numhit} {config[BAMTOCOV]} {input.bamresult} {wildcards.id} {config[TRANSCRIPTOMESIZE]} | pigz -p {threads} -c > {output} 
		"""

rule collectCovCount:
	input:
		expand(COVERAGEDIR + "{seqbatch}/" + "{id}.cov.txt.gz", zip, id=LIBIDS, seqbatch=SEQBATCHS)
	output:
		RESULTDIR + "allcov.txt.gz"
	threads: 8
	shell:
		"""
			zcat {input} | pigz -p {threads} -c > {output}
		"""

rule reshapeCovCount:
	input:
		rules.collectCovCount.output
	output:
		RESULTDIR + "allcov.wide.min" + config["COVMIN"] + ".txt.gz"
	params:
		splitby = config["SPLITBY"], sampleinfo = config["SAMPLEINFO"],downprop = config["DOWNSAMPLEPROP"]
	threads: 1
	shell:
		"""
			{config[RESHAPETABLE]} -i {input} -o {output} -v V3 -f V1+V2~V4 --header F --filterbySum {config[COVMIN]} --splitBy {params.splitby} --sampleinfo {params.sampleinfo} --downSampleProp {params.downprop}
		"""



rule saveCovToRdata:
	input:
		rules.reshapeCovCount.output
	output:
		RESULTDIR + "combined_v1all.Rdata"
	threads: 8
	params: 
		outdir = RESULTDIR , sampleinfo = config["SAMPLEINFO"], batchid = config["COMPAREBATCH"],ismerge = config["ISMERGE"], reftype = config["REFTYPE"]
	shell:
		"""
			{config[MERGECOV]} --args {params.outdir} {input} {params.sampleinfo} {params.batchid} {output} {params.ismerge} {params.reftype}
		"""

rule calldiffsites:
	input:
		covfile = rules.saveCovToRdata.output 
	output: 
		pvaluefile = RESULTDIR + vsAll[config["VSALL"]] + "/" + "etTable_{treatment}.Rdata",
		covfile = RESULTDIR + vsAll[config["VSALL"]] + "/" + "covinfo_{treatment}.Rdata"
	params:
		outdir = rules.saveCovToRdata.params.outdir + vsAll[config["VSALL"]] + "/", mincov = config["COVMIN"], treatment = lambda wildcards: wildcards.treatment, sampleinfo = config["SAMPLEINFO"], ismerge = config["ISMERGE"],
		sffile = RESULTDIR + vsAll[config["VSALL"]] + "/" + "edgeR_{treatment}_sf.Rdata", batchid = config["COMPAREBATCH"], control = config["CONTROL"], vsall = config["VSALL"]
	threads: 1
	shell:
		"""
			{config[RUNEDGER]} --args {params.outdir} {params.mincov} {params.treatment} {params.control} {params.vsall} {params.sampleinfo} {input.covfile} {params.sffile} {params.batchid} {params.ismerge}
		"""

rule getCandidateRegions:
	input:
		pvaluefile = rules.calldiffsites.output.pvaluefile,
		covfile = rules.calldiffsites.output.covfile
	output:
		RESULTDIR + vsAll[config["VSALL"]] + "/" +  "fastq2_{treatment}_output10.Rdata"
	params:
		mincov = config["COVMIN"], treatment = lambda wildcards: wildcards.treatment, outdir = rules.calldiffsites.params.outdir,
		sffile = rules.calldiffsites.params.sffile
	shell:
		"""
			{config[REGIONEVALUE]} --args {params.mincov} {params.treatment} {params.outdir} {input.covfile}
		"""
		

rule filterCandidates:
	input:
		diffsitefile = rules.getCandidateRegions.output,
		covfile = rules.calldiffsites.output.covfile
	output:
		filtercands = RESULTDIR + vsAll[config["VSALL"]] + "/" + "combined_{treatment}_output2_wfilters.txt",
	params:
		mincov = config["COVMIN"], treatment = lambda wildcards: wildcards.treatment, outdir = rules.calldiffsites.params.outdir, genestructure = config["GENESTRUC"],
		sffile = rules.calldiffsites.params.sffile, sampleinfo = config["SAMPLEINFO"], batchid = config["COMPAREBATCH"], ismerge = config["ISMERGE"], adjPbyChr = config["ADJPBYCHR"]
	shell:
		"""
			{config[FILTERCANDS]} --args {params.mincov} {params.treatment} {params.outdir} {input.covfile} {params.sffile} {params.genestructure} {params.sampleinfo} {params.batchid} {params.ismerge} {params.adjPbyChr}
		"""
rule extractCovInfo:
	input:
		filtercands = rules.filterCandidates.output.filtercands,
		covfile = rules.saveCovToRdata.output
	output:
		covoutput = RESULTDIR + vsAll[config["VSALL"]] + "/" + "combined_{treatment}_covinfo.xls"
	params:
		sampleinfo = config["SAMPLEINFO"], treatment = lambda wildcards: wildcards.treatment, control = config["CONTROL"],batch = config["COMPAREBATCH"], 
		genome = config["REFTRANSCRIPTFASTA"], outdir = rules.filterCandidates.params.outdir, ismerge = config["ISMERGE"], vsall = config["VSALL"],extsize = 300


	shell:
		"""
			{config[EXTRACTCOVINFO]} -i {input.filtercands} -s {params.sampleinfo} -b {params.batch} -t {params.treatment} -c {params.control} --covfile {input.covfile} --vsall {params.vsall} --ismerge {params.ismerge} --extWinSize {params.extsize} --genome {params.genome} --outdir {params.outdir}
		"""
